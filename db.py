from cjm import *import MySQLdbimport jsonclass Db:    """Manage the datawarehouse that store the results in a convenient format    """    def __init__(self, schema):        self.db = MySQLdb.connect(             host="127.0.0.1",             user="root",             passwd="root",             port=8889,             db=schema,            )        self.xes_id = None        self.run_id = None        self.cur = self.db.cursor()        self.db_binary = True        self.cur.execute("SET @@GLOBAL.wait_timeout=60000;")    def start(self, parameters):        if self.db_binary:            self.cur.execute("INSERT INTO run (start_time, parameters) VALUES (NOW(), '"+json.dumps(parameters).replace("'","")+"')")            self.run_id = self.db.insert_id()            print 'id:', self.run_id            self.db.commit()    def insert_best_cjm(self, population, xes):        if self.db_binary:            insert_query = "INSERT IGNORE INTO journey_has_trace (journey_id, trace_id) VALUES (%s, %s)"            best_cjm = population.elite[0]            q = {}            for key, quality in best_cjm.quality.iteritems():                q[key] = quality.get_quality()            self.cur.execute("INSERT INTO best_cjm (run_id, generation, quality, q_weighted) VALUES ("+str(self.run_id)+","+str(population.generation_number+1)+",'"+json.dumps(q)+"',"+str(best_cjm.overall_quality)+")")            best_cjm_id = self.db.insert_id()            trace_banks = []            for journey in best_cjm.journey:                self.cur.execute("INSERT INTO journey (best_cjm_id,activities,count_activities) VALUES ("+str(best_cjm_id)+", '"+json.dumps(journey.activities).replace("'","")+"', "+str(len(journey.activities))+")")                journey_id = self.db.insert_id()                #todo: what if trace_id has quote?                for trace_id in journey.close_traces_indices:                    trace_banks.append((                        str(journey_id),str(xes.traces[trace_id]['db_id'])                    ))            self.cur.executemany(insert_query, trace_banks)        self.db.commit()    def insert_xes(self, xes, original_pattern):        if self.db_binary:            self.cur.execute("INSERT INTO xes (filename) VALUES ('generated data')")            self.xes_id = self.db.insert_id()            self.cur.execute("UPDATE run SET xes_id = "+str(self.xes_id)+" WHERE id = "+str(self.run_id))            for id_trace, trace in xes.traces.iteritems():                #1==1                #print trace['activities']                #print trace['characteristics']                if original_pattern == []:                    self.cur.execute("INSERT INTO trace (xes_id,activities,characteristics,concept_name,original_pattern) VALUES ("+str(self.xes_id)+", '"+json.dumps(trace['activities']).replace("'","")+"', '"+json.dumps(trace['characteristics']).replace("'","")+"', '"+str(id_trace)+"', NULL)")                else:                    self.cur.execute("INSERT INTO trace (xes_id,activities,characteristics,concept_name,original_pattern) VALUES ("+str(self.xes_id)+", '"+json.dumps(trace['activities']).replace("'","")+"', '"+json.dumps(trace['characteristics']).replace("'","")+"', '"+str(id_trace)+"', '"+json.dumps(original_pattern[trace['original_pattern']]).replace("'","")+"')")                trace['db_id'] = self.db.insert_id()            self.db.commit()    def end(self):        if self.db_binary:            self.cur.execute("UPDATE run SET end_time = NOW() WHERE id = "+str(self.run_id))            self.db.commit()