import xml.etree.ElementTree as ETimport copyimport randomimport pandasimport numpy as npimport collectionsclass Xes:    """Xes is the standard to store event logs: http://www.xes-standard.org/    this class provide the means to load and parse it.    """    def __init__(self, path):        self.path = path        self.activity_list = set() #activity are represented by letters (e.g. set('a','b','c'))        self.traces = {}        self.characteristics_matrix = {}        self.characteristics_matrix_dummy = None    def parse_xes(self):        tree = ET.parse(self.path)        root = tree.getroot()        traces = {}        activity_list = set()        set_attribute = set()        for trace in root.iter('trace'):            for string in trace.findall('string'):                if 'key' in string.attrib.keys() and 'value' in string.attrib.keys():                    if string.attrib['key'] != 'concept:name':                        set_attribute.add(string.attrib['key'])        set_attribute = list(set_attribute)        for i, trace in enumerate(root.iter('trace')):            traces[i] = {}            traces[i]['activities'] = []            traces[i]['characteristics'] = {}            traces[i]['db_id'] = None            for attribute in set_attribute:                traces[i]['characteristics'][attribute] = np.NaN            for string in trace.findall('string'):                if 'key' in string.attrib.keys() and 'value' in string.attrib.keys():                    if string.attrib['key'] != 'concept:name':                        traces[i]['characteristics'][string.attrib['key']] = string.attrib['value']            for event in trace.iter('event'):                activity = event.find(".//string[@key='concept:name']").get('value')                traces[i]['activities'].append(activity)                activity_list.add(activity)        self.activity_list = activity_list        self.traces = traces        self.build_categorical_matrix()    def build_categorical_matrix(self):        matrix = {}        for trace_id, trace in self.traces.iteritems():            matrix[trace_id] = trace['characteristics'].values()        self.characteristics_matrix = pandas.DataFrame.from_dict(matrix, orient='index', dtype=None)        self.characteristics_matrix.columns = trace['characteristics'].keys()        dat2 = pandas.DataFrame({'predictor': [-1] * self.characteristics_matrix.shape[0]})        self.characteristics_matrix_dummy = pandas.get_dummies(self.characteristics_matrix.join(dat2))        self.characteristics_matrix = self.characteristics_matrix.join(dat2)